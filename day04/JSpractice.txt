// RECURSIVE IS WORKING HERE

function setUserName() {
  const myName = prompt("Please enter your name.");
  if (!myName) {
    setUserName();
  } else {
    localStorage.setItem("name", myName);
    myHeading.textContent = `Mozilla is cool, ${myName}`;
  }
}

setUserName();

// APIs

Browser APIs are built into your web browser, and are able to expose data from the surrounding computer environment, or do useful complex things. For example: DOM,Geolocation API...

Third party APIs are not built into the browser by default, and you generally have to grab their code and information from somewhere on the Web. For example: Twitter API,...

// Broswer Security

Each browser tab has its own separate bucket for running code in (these buckets are called "execution environments" in technical terms) — this means that in most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website. This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.

*reuseable code is a function

// Interpreted vs compiled code

Each browser tab has its own separate bucket for running code in (these buckets are called "execution environments" in technical terms) — this means that in most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website. This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.
## JavaScript, Perl, Python, BASIC, etc.

Compiled languages on the other hand are transformed (compiled) into another form before they are run by the computer. For example, C/C++ are compiled into machine code that is then run by the computer. The program is executed from a binary format, which was generated from the original program source code.
## C, C++, C#, CLEO, COBOL, etc


// Script loading strategies

In the above code examples, in the internal and external examples the JavaScript is loaded and run in the head of the document, before the HTML body is parsed. This could cause an error, so we've used some constructs to get around it.

## document.addEventListener("DOMContentLoaded", () => {
##  // …
## });

*This code signifies that the HTML body is completely loaded and prased, then js code runs.
* defer atttibute which tells the browser to continuing dowloading the HTML content once <script> tag  element has been reached # <script src="script.js" defer></script> 
-- we dont use the DOMContentLoaded event beacuse the defer solved this problem, works only for external scripts

## async and defer

